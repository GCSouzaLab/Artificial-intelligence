import numpy as np
import matplotlib.pyplot as plt
import matplotlib.colors as mcolors
import random

# Posição inicial
posAPAx = 1
posAPAy = 1

# Definindo as cores do ambientes fixas, não pode ficar dentro do método "exibir"
# pois na ultima etapa o index 2 deixa de existir na matriz a cor verde é removida da lista de cores e a matriz fica diferente do esperado.
cmap = mcolors.ListedColormap(['blue', 'green', 'yellow'])
norm = mcolors.BoundaryNorm([0, 1, 2, 3], cmap.N)  # Define os limites fixos para evitar mudança nas cores


# Função que exibe o ambiente na tela
def exibir(matriz):    
    global posAPAx
    global posAPAy

    # Adiciona divisão entre os quadrantes.
    fig, ax = plt.subplots()
    ax.set_xticks(np.arange(-.5, 6, 1), minor=True)
    ax.set_yticks(np.arange(-.5, 6, 1), minor=True)
    ax.grid(which="minor", color="black", linestyle='-', linewidth=2)
    
    plt.imshow(matriz, cmap=cmap, norm=norm)
    
    # Coloca o agente no ambiente 
    plt.plot([posAPAy],[posAPAx], marker='o', color='r', ls='')
    
    plt.show(block=False)
    
    # Pausa a execução do código por 0.5 segundos para facilitar a visualização
    plt.pause(0.5)    
    plt.clf()


def criar_sala():
    # 6x6
    matriz = np.ones((6,6))
    # Borda
    matriz[0, :] = 1
    matriz[-1, :] = 1
    matriz[:, 0] = 1
    matriz[:, -1] = 1
    # 4x4
    matriz[1:5, 1:5] = np.random.choice([0, 2], size=(4, 4))
    return matriz

def limpar_celula(matriz):
    global posAPAx
    global posAPAy
    
    status = matriz[posAPAx, posAPAy]
    if status == 2:
        matriz[posAPAx, posAPAy] = 0


def andar_proximo(matriz):
    global posAPAx
    global posAPAy
    
    if posAPAx % 2 == 0:
        if matriz[posAPAy - 1, posAPAx] == 1:
            if matriz[posAPAy, posAPAx + 1] == 1:
                return False
            posAPAx += 1
            return True
        posAPAy -= 1
        return True
    else:
        if matriz[posAPAy + 1, posAPAx] == 1:
            if matriz[posAPAy, posAPAx + 1] == 1:
                return False
            posAPAx += 1
            return True
        posAPAy += 1
        return True


def iniciar_agente():
    global posAPAx
    global posAPAy
    sala = criar_sala()
    limpar_celula(sala)
    exibir(sala)
    
    while (andar_proximo(sala)):
        limpar_celula(sala)
        exibir(sala)

iniciar_agente()
